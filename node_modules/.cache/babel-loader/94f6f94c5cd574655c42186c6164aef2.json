{"ast":null,"code":"var _jsxFileName = \"/home/helen/Documents/Projects/React/goit-react-hw-03-image-finder/src/App.js\";\nimport { Component } from 'react';\nimport Loader from \"react-loader-spinner\";\nimport Searchbar from './components/Searchbar';\nimport ImageGallery from './components/ImageGallery';\nimport fetchImage from './components/imageApi';\nimport Modal from './components/Modal';\nimport Button from \"./components/Button\";\nimport './App.css';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      query: '',\n      queryResult: {},\n      page: 1,\n      imageUrl: '',\n      modalStatus: false,\n      loaderStatus: false\n    };\n\n    this.handleToggleModal = () => {\n      this.setState(({\n        modalStatus\n      }) => ({\n        modalStatus: !modalStatus\n      }));\n    };\n\n    this.handleFetchApi = queryValue => {\n      fetchImage(queryValue, this.state.page).then(res => {\n        this.setState({\n          queryResult: res.data.hits\n        });\n      }).catch(error => console.log(\"error\", error));\n    };\n\n    this.handleQueruSearch = query => {\n      this.setState({\n        loaderStatus: true,\n        query: query\n      });\n    };\n\n    this.handleOnClickImage = url => {\n      this.setState({\n        imageUrl: url\n      });\n      this.handleToggleModal();\n    };\n\n    this.hangleLoadMore = () => {};\n  }\n\n  componentDidUpdate(prevState, newState) {\n    if (prevState.query !== newState.query) {\n      this.handleFetchApi(this.state.query);\n    }\n  }\n\n  render() {\n    const {\n      queryResult,\n      imageUrl,\n      modalStatus,\n      loaderStatus\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Container\",\n      children: [/*#__PURE__*/_jsxDEV(Searchbar, {\n        onClick: this.handleQueruSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), loaderStatus && /*#__PURE__*/_jsxDEV(Loader, {\n        type: \"Rings\",\n        color: \" #3f51b5\",\n        height: 70,\n        width: 70\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 26\n      }, this), queryResult.length > 0 && /*#__PURE__*/_jsxDEV(ImageGallery, {\n        images: queryResult,\n        onImageClick: this.handleOnClickImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 36\n      }, this), !!modalStatus && /*#__PURE__*/_jsxDEV(Modal, {\n        handleToggleModal: this.handleToggleModal,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: imageUrl,\n          alt: \"some pic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/helen/Documents/Projects/React/goit-react-hw-03-image-finder/src/App.js"],"names":["Component","Loader","Searchbar","ImageGallery","fetchImage","Modal","Button","App","state","query","queryResult","page","imageUrl","modalStatus","loaderStatus","handleToggleModal","setState","handleFetchApi","queryValue","then","res","data","hits","catch","error","console","log","handleQueruSearch","handleOnClickImage","url","hangleLoadMore","componentDidUpdate","prevState","newState","render","length"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport Loader from \"react-loader-spinner\";\n\n\nimport Searchbar from './components/Searchbar';\nimport ImageGallery from './components/ImageGallery';\nimport fetchImage from './components/imageApi';\nimport Modal from './components/Modal'\nimport Button from \"./components/Button\";\n\nimport './App.css';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\n\nclass App extends Component {\n\n  state = {\n    query: '',\n    queryResult: {},\n    page: 1,\n    imageUrl: '',\n    modalStatus: false,\n    loaderStatus: false,\n  }\n\n  componentDidUpdate(prevState, newState) {\n    if (prevState.query !== newState.query) {\n      this.handleFetchApi(this.state.query);\n    }\n  }\n\n  handleToggleModal = () => {\n    this.setState(({ modalStatus }) => ({\n      modalStatus: !modalStatus\n    }))\n  }\n\n  handleFetchApi = (queryValue) => {\n    fetchImage(queryValue, this.state.page)\n      .then((res) => {\n        this.setState({ queryResult: res.data.hits })\n      })\n      .catch(error => console.log(\"error\", error))\n  }\n\n  handleQueruSearch = (query) => {\n    this.setState({\n      loaderStatus: true,\n      query: query,\n    })\n  }\n\n  handleOnClickImage = (url) => {\n    this.setState({\n      imageUrl: url,\n    })\n    this.handleToggleModal()\n  }\n\n  hangleLoadMore = () => {\n\n  }\n\n  render() {\n    const { queryResult, imageUrl, modalStatus, loaderStatus } = this.state;\n\n    return (\n      <div className=\"Container\">\n        <Searchbar onClick={this.handleQueruSearch} />\n        {loaderStatus && <Loader\n          type=\"Rings\"\n          color=\" #3f51b5\"\n          height={70}\n          width={70}\n        />}\n        {queryResult.length > 0 && < ImageGallery images={queryResult} onImageClick={this.handleOnClickImage} />}\n        {/* {queryResult.length > 0 && <Button onClick={this.hangleLoadMore} />} */}\n        {!!modalStatus &&\n          <Modal handleToggleModal={this.handleToggleModal}>\n            <img src={imageUrl} alt=\"some pic\" />\n          </Modal>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}